
#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
//#include <iostream>
#include <controller.h>
#include "dynamixel_sdk.h"   
#include <sync_read_write2.h>                              // Uses Dynamixel SDK library
#include <linear_read_write.h>
#include <wheel.h>
#include "ros/ros.h"
#include "std_msgs/Int32.h"
#include <iostream>
#include <ros/ros.h>
#include <sensor_msgs/Joy.h>
#include <sensor_msgs/JoyFeedbackArray.h>


#define PERIOD_NS 100000000  // 1Khz
#define SEC_IN_NSEC 1000000000

using namespace std;

double now_time , now_time2;

CController Control;
CRobot_Arm_TR RobotArm;
Clinear linear; 
Cwheel wheel;
int tmpcnt = 0;
int tmpcnt2 = 0;
int linear_goal = 0;
int old_linear_goal = 0;
bool linear_play_state = 0;
bool dynamixel_state = 0;
int test = 0;
float axes[8];
int button[8];
int old_x_goal[5];
bool test_state = 1;

}

void KeyboardCallback(const std_msgs::Int32::ConstPtr& msg)
{
   //ROS_INFO("Recieved: [%d]", msg->data);
   //test = msg.data;
   test = msg->data;
}

void JoystickCallback(const sensor_msgs::Joy::ConstPtr& joy_msg)
{
  for(int i = 0 ; i < 8 ; i++)
  {
    axes[i] = joy_msg->axes[i];
  }
    for(int i = 0 ; i < 8 ; i++)
  {
    button[i] = joy_msg->buttons[i];
  }
}
void *ros_com(void *data)
{
  //ros::init(argc, argv, "subscriber");   
  while(ros::ok())
  {
  ros::NodeHandle n;
  ros::NodeHandle nh_;
  ros::Subscriber sub2 = nh_.subscribe("joy", 10, JoystickCallback);
  ros::Subscriber sub = n.subscribe("/numbers", 10, KeyboardCallback);
  ros::spin();
  }
}


int main(int argc, char **argv)
{
  ros::init(argc, argv, "subscriber");
  pthread_t thread1, thread2;
  struct timespec ts;
  struct timespec ts2;
  clock_gettime(CLOCK_MONOTONIC, &ts);
  clock_gettime(CLOCK_MONOTONIC, &ts2);
  int start_time = ts2.tv_sec;
//////////////// initialize RS485
    RobotArm.start();
    RobotArm.RX();
    linear.Open_linear();
    wheel.Open_port();
  
   linear.goalposition2Uchar(-8000000);
   int cnt_timer = 0;
  cout << "Start RS485 Communication!" << endl << "Wait for 7.5 sec" <<endl<<endl;
   while(1)
   {
       while(ts.tv_nsec >= SEC_IN_NSEC)
         {
             ts.tv_sec++;
             ts.tv_nsec -= SEC_IN_NSEC;
         }
         clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &ts, NULL);
         ts.tv_nsec += 100000000;     
       
       if(cnt_timer >= 75) //7.5sec
       {
         cnt_timer =0;
        break;
       }
       cnt_timer++;
   }
    //RobotArm.goalposition(RobotArm._dxl_present_position);
    linear.homing();


// //////////////// RS485 communication
   pthread_create(&thread1, NULL, &dynamixelthread,  (void*) &ctime);
  pthread_create(&thread2, NULL, &ros_com, (void*) &ctime);
  while(ros::ok())
  {
     while(ts.tv_nsec >= SEC_IN_NSEC)
         {
             ts.tv_sec++;
             ts.tv_nsec -= SEC_IN_NSEC;
         }

         while(ts2.tv_nsec >= SEC_IN_NSEC)
         {
             ts2.tv_sec++;
             ts2.tv_nsec -= SEC_IN_NSEC;
         }

         old_linear_goal = linear_goal;
         for(int i = 0 ; i<5 ; i++)
         {
           old_x_goal[i] = Control._x_goal[i];
         }

         ts.tv_nsec +=PERIOD_NS;
         clock_gettime(CLOCK_MONOTONIC, &ts2);
         now_time = ts2.tv_sec - start_time;
         now_time2 = now_time + ts2.tv_nsec / 1000000000.0;
         Control.get_present_position(RobotArm._dxl_present_position);
         Control.Finite_State_Machine(button[5],axes[2],axes[5]);
         RobotArm.goalposition(Control._x_goal);
         linear_goal = Control._x_goal[0];
        //  cout<<now_time2<<endl;

         if(old_linear_goal == linear_goal)
         {       
         }
         else
         {
           linear_play_state = 1;
         }
         
         for (int i = 0 ; i<5 ; i++)
         {
           if(old_x_goal[i] == Control._x_goal[i])
           {
           }
           else
           {
             dynamixel_state = 1;
           }
         }

        //  if(Control._new_mode == 1)
        //  {
        //    linear.homing();
        //    Control._new_mode = 0;
        //    std::cout<<Control._new_mode<<std::endl;
        //  }
        wheel.JoyStick_msg(axes,button);
  }
  pthread_join(thread1,NULL);
  pthread_join(thread2,NULL);
  return (0);
}

